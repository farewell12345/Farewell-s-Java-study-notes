# 正则表达式

# （regular expression）

概念：正则表达式可以用字符串来描述规则，并用来匹配字符串

1.一个正则表达式用字符串来描述规则

2.只需要编写正确的规则，就可以让正则表达式引擎去判断目标字符串是否符合规则

3.正则表达式是一套标准，可以用于任何语言

4.JDK内置正则表达式引擎：java.util.regex

```java
import java.util.Scanner;
import  java.util.regex.*;
public class Stack {//判断输入的字符是否为19xx
    public static void main(String[] args) {
       String input;
        Scanner scan = new Scanner(System.in);
        input = scan.nextLine();
        //正则表达式中表示19xx的表达式为19 \d \d 但是在java中\是转义字符，因此java中用\\来表示正则表达式
       boolean is19xx = input.matches("19\\d\\d");
       System.out.println(is19xx);
    }
}

```

再比如：

```java
import java.util.Scanner;
import  java.util.regex.*;
public class Stack {
    public static void main(String[] args) {
       String input;
        Scanner scan = new Scanner(System.in);
        input = scan.nextLine();
       boolean is19xx = input.matches("this is text");//匹配this is text，精确匹配
       System.out.println(is19xx);
    }
}

```

**选择匹配”？“**

```java
import java.util.Scanner;
import  java.util.regex.*;
public class Stack {
    public static void main(String[] args) {
       String input;
        Scanner scan = new Scanner(System.in);
        input = scan.nextLine();
       boolean is19xx = input.matches("\\d+(\\.\\d+)?");//可匹配整数与浮点数
       System.out.println(is19xx);
    }
}

```

正则表达式的规则：

| 正则表达式 | 描述                                                         |
| ---------- | ------------------------------------------------------------ |
| **.**      | 匹配任何字符（boolean is19xx = Str.matches(".");//不论输入什么**单个字符**都会返回true |
| ^          | 1.**匹配输入的开始**，/^A/会匹配"An e"中的A，但是不会匹配"ab A"中的A |
|            | 2.（**否**）**取反**  如：[^a】 表示“匹配除了a的任意字符”。【^a-zA-Z0-9】表示找到以一个。【\^abc】表示找到一个\或者a或者b或者c |
| $          | 1.匹配输入的结尾                                             |
|            |                                                              |
|            |                                                              |
|            |                                                              |
|            |                                                              |
|            |                                                              |

**元字符**

| 正则表达式 | 描述                                                         |
| ---------- | ------------------------------------------------------------ |
| \d         | 数字字符匹配。等效于[0-9]                                    |
| \D         | 非数字字符匹配，等效于[   ^0-9]                              |
| \s         | 任何空白字符，包括空格，制表符，换页符等。与[\f\n\r\t\v]等效 |
| \S         | 匹配任何非空白字符                                           |
| \w         | 垂直制表符匹配。与\x0b和\cK等效                              |
| \W         | 匹配任何字类字符，包括下划线，与[A-Za-z0-9]等效              |
| \S         | 匹配任何非空白字符。与[^\f\n\r\t\v\]等效                     |
| \b         | 匹配一个单词边界，大本次字符是[a-zA-Z0-9]                    |
|            |                                                              |

**量化**

| 正则表达式 | 描述                                        | 例子                                                         |
| ---------- | ------------------------------------------- | ------------------------------------------------------------ |
| x*         | 出现零次或多次，就是{0，}                   | boolean is = input.matches("[123]*");//允许input字符串里面出现1，2，3，或者12，23，13或者123以及**”“不出现（0次）** |
| x+         | 与*类似，但是没有0次，是一次和多次就是{1，} | boolean is19xx = input.matches("[123]+");//允许input字符串里面出现1，2，3，或者12，23，13或者123，**但是不允许出现0次** |
| ？         | 一次或一次也没有                            | boolean is19xx = input.matches("[123]?");//**只允许1或者2或者3和0次，不允许其它出现情况** |
| x{n}       | 出现恰好n次                                 | boolean is19xx = input.matches("[123]{5}");//允许”12312“这种**匹配元素累计出现恰好5次**的情况 |
| x{n，}     | 出现至少n次                                 | boolean is19xx = input.matches("[123]{5,}");//**允许出现**”1212132121231213212“甚至**更多的情况，但必须至少出现五次** |
| x{n，m}    | 出现次数大于等于n次小于等于m次              | boolean is19xx = input.matches("[123]{5,10}");//允许出现大于5次小于10次，比如”12121212“的情况，不允许出现其它情况 |
|            |                                             |                                                              |
|            |                                             |                                                              |
|            |                                             |                                                              |

**正则匹配分割：**

**split方法：**

```java
import java.util.Scanner;
import  java.util.regex.*;
public class Stack {
    public static void main(String[] args) {
       String input = "陈昊 王涛 注解";//按照空格切割字符串
        String[] arr = input.split(" ");//搜索匹配的正则表达式然后切割字符串
        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }
}
/*输出：陈昊
	   王涛
	   注解
	*/
```

例子：

对字符串”23 25 78 46 64 91“排序

```java

import static java.lang.System.* ;
public class Stack {
    public static void main(String[] args) {
        String input = new String("23 25 78 46 64 91");
        String[] arr = input.split(" ");
//搜索匹配的正则表达式然后切割字符串
        int[] Arr = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            Arr[i] = Integer.parseInt(arr[i]);
        }
        for (int i = 0; i < Arr.length; i++) {
            for (int j = 1; j < Arr.length - i; j++) {
                int temp;
                if (Arr[j] < Arr[j -1]) {
                    temp = Arr[j];
                    Arr[j] = Arr[j - 1];
                    Arr[j - 1] = temp;
                }
            }
        }
        String array = "";
        for (int i = 0; i < Arr.length; i++) {
            array+=" "+Arr[i];
        }
        out.println(array);
    }
}

```

